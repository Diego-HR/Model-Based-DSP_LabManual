#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\lang spanish-mexico
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
topskip0pt
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang spanish-mexico
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{
\backslash
fill}
\end_layout

\end_inset


\end_layout

\begin_layout Part
Resultados y conclusiones.
\end_layout

\begin_layout Standard

\lang spanish-mexico
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{
\backslash
fill}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang spanish-mexico
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang spanish-mexico
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection

\lang spanish-mexico
Resultados obtenidos.
\end_layout

\begin_layout Standard
Los alcances obtenidos durante el desarollo de esta investigación, se enlistan
 a continuación:
\end_layout

\begin_layout Itemize
Se logró demostrar la correcta ejecución de sistemas DSP complejos, basándose
 en el algoritmo de alto nivel previamente descrito en Matlab
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textregistered
\end_layout

\end_inset

, y cómo analizar dichos algoritmos desde la perspectiva de hardware, para
 así lograr definir la mejor arquitectura a implementar en FPGA.
\end_layout

\begin_layout Itemize
Se mencionaron técnicas avanzadas de diseño en FPGA a lo largo de los prototipos
 ilustrados, describiendo la importancia de utilizarlos para incrementar
 el desempeño del sistema y así obtener resultados de calidad y libres de
 errores.
\end_layout

\begin_layout Itemize
La implementación de filtros digitales es un tema fundamental en el ámbito
 del Procesamiento Digital de Señales.
 Esta investigación demostró, en primer instancia, como realizar el diseño
 de filtros FIR a partir de tener una especificación real que resuelve un
 problema común como es la presencia de ruido en señales, y además, como
 se puede llevar la especificación a un FPGA para poder observar la ejecución
 en forma real y no solo basándose en un resultado obtenido en un ambiente
 artificial, como lo es la simulación pura.
\end_layout

\begin_layout Itemize
Se utilizaron diferentes ingredientes para resolver el problema que se planteaba
 en cada uno de los modelos diseñados, desde lenguajes HDL (Verilog) y scripts
 M, hasta diferentes maneras de exportar el producto obtenido desde Sysgen,
 para así poder animar al alumno a explorar otras vias de diseño disponibles
 por las herramientas utilizadas en esta documentación, y no sólo las que
 el autor muestra.
\end_layout

\begin_layout Itemize
Uno de los campos más atractivos en el área de diseño electrónico actual,
 es el campo del procesamiento de imágenes y video basado en FPGAs.
 Esta investigación desarrolló una de las implementaciones más populares
 en dicho ámbito, aprovechando la abstracción que Matlab® provee y logrando
 ilustrar las bases para prototipos más complejos.
\end_layout

\begin_layout Itemize
Técnicas avanzadas de diseño de sistemas DSP con Sysgen fueron implementadas
 al llevar el algoritmo de procesamiento de audio, a ejecución en tiempo
 real.
 Se pudo implementar correctamente el modelo aún cuando existian diferentes
 dominios de reloj necesarios tanto para el controlador del códec, como
 para la ejecución del modelo de Sysgen y el filtro peine, obteniendo resultados
 satisfactorios.
\end_layout

\begin_layout Itemize
A lo largo de los prototipos desarollados, se hizo énfasis en la metodología
 del co-diseño de hardware y software y las ventajas de utilizar los diferentes
 niveles de abstracción para un mejor resultado.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Conclusiones.
\end_layout

\begin_layout Standard
Los objetivos particulares planteados en este tema de investigación fueron
 demostrar, a través de la experimentación, el flujo de diseño para sistemas
 DSP complejos utilizando dispositivos FPGA y sus ventajas sobre procesadores
 digitales de señal especializados.
 Esto se cumplió satisfactoriamente al realizar las implementaciones descritas
 en este documento y mediante la explicación de las diferentes técnicas
 existentes para poder resolver el problema que cada uno de los modelos
 implicaba.
\end_layout

\begin_layout Standard
Las arquitecturas de FPGA modernas facilitan la implementación de algoritmos
 DSP debido a que cuentan con macros optimizadas para este tipo de tareas,
 habilitando el uso del paralelismo para obtener los resultados de operaciones
 sobre los datos de interés, de una manera más eficiente.
 
\end_layout

\begin_layout Standard
Además, la flexibilidad de implementación en dispositivos reconfigurables
 permite utilizar métodos avanzados de síntesis basados en el balance de
 área y desempeño, como se utilizó en el desarrollo del algoritmo de audio,
 los cuales no pueden ser utilizados en otro tipo de dispositivos y que
 brindan una significante ventaja sobre estos.
\end_layout

\begin_layout Standard
El uso de software de alto nivel como Matlab® para apoyar el proceso de
 diseño y verificación, resulta en la posibilidad de crear sistemas de alta
 complejidad, en sólo una fracción del tiempo que llevaría al utilizar otra
 metodología.
 
\end_layout

\begin_layout Standard
Las arquitecturas utilizadas en esta investigación fueron verificadas utilizando
 el vector de prueba definido desde Simulink®, para emular las entradas
 al sistema, sin necesidad de adquirir equipamiento costoso como convertidores
 A/D y D/A de alta precisión.
 Sin embargo, estos mismos modelos pueden ser acondicionados para trabajar
 con adquisición de datos en altas frecuencias, con tan sólo cambiar los
 parámetros de generación en el 
\emph on
'Sysgen Token'.
\end_layout

\begin_layout Standard
A pesar de que Sysgen brinda al usuario la capacidad de crear modelos con
 relativa facilidad, es fundamental tener en cuanta todos los conceptos
 técnicos para poder resolver los problemas que se presenten durante la
 implementación de cualquier algoritmo.
 
\end_layout

\begin_layout Standard
Por experiencia, uno de los problemas más comunes se encuentra al utilizar
 diferentes dominios de reloj para un mismo sistema.
 Por ejemplo, al realizar el algoritmo de procesamiento de audio, la frecuencia
 principal del controlador del códec AC97 era de 100MHz, no así la velocidad
 de procesamiento de los archivos .wav que debía ser estrictamente de 48KHz.
 Al intentar implementar ambos modelos desde Sysgen, la única salida en
 los puertos de audio era una señal de ruido constante.
\end_layout

\begin_layout Standard
Se pueden realizar diferentes técnicas para resolver estos detalles con
 múltiples frecuencias, que van desde el uso de memorias FIFO, bloques 
\emph on
'downsample' 
\emph default
y 
\emph on
'upsample'
\emph default
 y algunas más complicadas.
 Sin embargo, lo más sencillo es isolar los diferentes bloques y especificar
 en el 
\emph on
'Sysgen Token' 
\emph default
las frecuencias de trabajo requeridas en los campos 
\emph on
'FPGA clock period (ns)' 
\emph default
y 
\emph on
'Simulink system period
\emph default
 (ns)', 
\series bold
siempre y cuando el modelo se vaya a exportar como netlist en HDL
\series default
.
 Esto obligará a la herramienta a insertar lógica adicional para cumplir
 los requerimientos, en lugar de cargar esta tarea al diseñador.
\end_layout

\begin_layout Standard
Todas las implementaciones expuestas fueron pensadas para usar el menor
 número de recursos disponibles en el kit Atlys, así como cumplir los requerimie
ntos de 
\emph on
'timing'
\emph default
 que cada instancia necesitaba.
 La implementación con más área utilizada, fue el prototipo completo del
 algoritmo de eco, con un 17% de utilización de elementos lógicos.
 
\end_layout

\begin_layout Standard
También fue posible lograr ejecutar algoritmos complejos como lo es el filtro
 Sobel, desde la conversión de la imagen a escala de grises, sin ocupar
 más del 4% de recursos lógicos y 65% de las macros DSP48A disponibles en
 la tarjeta Atlys (alrededor de 38 DSP48A)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Cabe recordar que, el dispositivo Spartan-6® utilizado en este kit, es el
 de mediana capacidad lógica y cuenta sólo con 58 elementos DSP48A.
\end_layout

\end_inset

.
 Este resultado da como referencia, la capacidad de integración de sistemas
 DSP utilizando Sysgen, sin necesidad de recurrir a dispositivos FPGA más
 complejos y por ende, más costosos, lo que hace de esta metodologia, una
 forma viable de prototipado para el sector académico e inclusive, el industrial.
\end_layout

\begin_layout Standard
Es importante aclarar que no todos los conceptos de Sysgen fueron cubiertos
 en este documento.
 Existen numerosas técnicas de diseño para diferentes niveles de abstracción
 bastante atractivas, desde la utilización de código m (scripts de Matlab®)
 como bloques sintetizables, hasta el uso de procesadores como PicoBlaze®/MicroB
laze® para generar un sistema embebido completo, sin depender del vector
 de simulación de Simulink®.
 Se recomeinda siempre tener a la mano el documento '
\emph on
System Generator for DSP, User Guide (UG640)' 
\emph default
para comprender a fondo todo lo ilustrado en esta guía y demás conceptos
 fundamentales y limitaciones.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Trabajo futuro y recomendaciones.
\end_layout

\begin_layout Standard
El autor recomienda las siguientes implementaciones para cada uno de los
 modelos desarrollados, a manera de seguimiento.
\end_layout

\begin_layout Subsubsection
Filtrado básico de señales.
\end_layout

\begin_layout Itemize
Utilizar el bloque de 
\emph on
'ChipScope®'
\emph default
 con el fin de observar la señal filtrada en el analizador lógico que el
 paquete de Xilinx® provee, en lugar de usar el 
\emph on
'scope'
\emph default
 de Simulink®.
 Controlar la ganancia de la señal de ruido con los switches disponibles
 en el kit, para observar la respuesta en tiempo real del modelo ante cambios
 externos.
\end_layout

\begin_layout Itemize
Implementar el filtro FIR pasabajas en Verilog, utilizar el bloque 
\emph on
'Black Box' 
\emph default
para usar esa implementación en HDL como bloque de Sysgen, y comparar resultados.
 Los coeficientes del filtro fueron previamente calculados, lo que le quita
 complejidad a la implementación en Verilog.
\end_layout

\begin_layout Itemize
Cambiar el bloque 
\emph on
'Fir Compiler' 
\emph default
por uno 
\emph on
'n-tap MAC FIR Filter' 
\emph default
el cual se puede optimizar para esta aplicación en particular.
 Calcular el periodo de muestreo requerido a partir del número de coeficientes
 necesarios y comparar resultados de ejecución e implementación.
\end_layout

\begin_layout Subsubsection
Procesamiento de audio.
\end_layout

\begin_layout Itemize
Desarrollar un algoritmo diferente al de eco, por ejemplo, reberveración,
 y ejecutarlo en tiempo real con la IP del códec AC97 facilitada por el
 autor.
\end_layout

\begin_layout Itemize
Debido a la naturaleza de este diseño, se pueden presentar pequeñas fluctuacione
s en el audio reproducido, sobre todo cuando el volumen es incrementado.
 Se puede utilizar el bloque de 
\emph on
'ChipScope®' 
\emph default
y 
\emph on
'Spectrum Analyzer'
\emph default
 para obtener la información necesaria de la magnitud en frecuencia de la
 señal de ruido inducida por el incremento de ganancia, y eliminarla usando
 el filtro descrito en la sección 
\series bold
6 Filtrado básico de señales
\series default
,
\series bold
 
\series default
con los parámetros obtenidos.
\end_layout

\begin_layout Itemize
Se puede implementar un sistema de reconocimiento de voz, usando como base
 el modelo para el algoritmo de eco.
 Se necesita utilizar, en lugar del filtro peine, un bloque de la Transformada
 Rápida de Fourier, incluído en Sysgen como '
\emph on
Fast Fourier Transform', 
\emph default
y lógica adicional
\emph on
 
\emph default
dependiendo de la especificación u objetivo de reconocimiento.
\end_layout

\begin_layout Subsubsection
Procesamiento de imagenes.
\end_layout

\begin_layout Itemize
Con el desarrollo descrito en esta sección, se pueden implementar diferentes
 algoritmos y transformaciones como obtener el negativo de la imagen, rotación,
 incremento o decremento de valores como brillo, étc.
 Ya sea en escala de grises, o en mapa de color RGB.
\end_layout

\begin_layout Itemize
Utilizar video en lugar de imagen como entrada a filtrar.
 El bloque 
\emph on
\lang spanish-mexico
'Image From File' 
\emph default
acepta videos en diferentes formatos y es posible basarse en la implementación
 del filtro Sobel en imagen, para usar video.
\end_layout

\begin_layout Itemize

\lang spanish-mexico
Una implementación mucho más compleja sería visualizar la imagen procesada,
 en algún monitor, utilizando los puertos HDMI de la tarjeta Atlys.
 Esto es posible ya sea, exportando el modelo en un sistema basado en el
 procesador MicroBlaze® y desarrollar los drivers y firmware necesario,
 en lenguaje C, o bien, desarrollando la interfaz que controle los puertos
 HDMI de la tarjeta Atlys y utilizando el modelo en Sysgen como parte de
 la misma interfaz.
 Digilent® provee ejemplos que pueden ayudar a realizar esta implementación.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
