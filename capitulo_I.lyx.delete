#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\begin_preamble
\date{}
\usepackage{setspace}
\doublespacing
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf5
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1.54in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part
\paragraph_spacing double
Introducción.
\end_layout

\begin_layout Section
\paragraph_spacing double
Planteamiento del problema
\end_layout

\begin_layout Standard
\paragraph_spacing double

\lang english
En la actualidad la electrónica está presente en prácticamente en todos
 los aspectos de nuestra vida a través de una gran infinidad de dispositivos
 y sistemas: teléfonos inteligentes, monitores de ritmo cardiaco, cámaras
 fotográficas, televisores, automóviles, refrigeradores, computadoras, etc.
 Todos estos dispositivos realizan de manera interna la manipulación e interpret
ación de señales eléctricas, que en otras palabras es lo que se conoce como
 procesamiento de señales.
 El procesamiento de una señal puede aplicarse, por ejemplo, en el reconocimient
o de voz para determinar quién es la persona que habla; para determinar,
 mediante una imagen, piezas defectuosas en una línea de producción o para
 la protección de información (encriptación).
 El procesamiento de señales involucra la realización de operaciones matemáticas
 sobre las señales, las cuales son llevadas por sistemas cuya única función
 es precisamente el llevar a cabo esas operaciones, los procesadores digitales
 de señales (DSP, por sus siglas en inglés) y los arreglos programables
 (FPGA, por sus siglas en inglés) son los encargados de ello.
 En muchas aplicaciones de procesamiento de señales se requiere una velocidad
 de procesamiento elevada (por ejemplo procesamiento de video) por lo que,
 debido al paralelismo de su operación, los FPGA son aptos para ser utilizados
 en ellas 
\begin_inset CommandInset citation
LatexCommand cite
key "kehtarnavaz_digital_2010"

\end_inset

.
 Con el fin de explotar las ventajas que los FPGA poseen y poderlos aplicar
 de una manera eficaz en el procesamiento de señales es necesario contar
 con sólidos conocimientos principalmente en metodologías de diseño digital
 e implementación matemática de algoritmos; estos conocimientos debe adquirirse
 desde la academia, puesto que es el tiempo ideal en que el futuro ingeniero
 o arquitecto de sistemas puede ir desarrollando, a través de la experimentación
, las habilidades necesarias para crear prototipos en el que se involucre
 el procesamiento de señales.
 Teniendo como objetivo principal el recortar la curva de aprendizaje, las
 empresas líderes en FPGA como Xilinx, Altera y Synopsys proporcionan plataforma
s de trabajo que puede interactuar con Matlab (software especializado que
 permite la implementación y prueba de algoritmos).
 De esta forma, el alumno puede poner en práctica de forma ágil y sin complicaci
ones los conocimientos adquiridos en las áreas de procesamiento digital
 de señales.
 Muchas veces la información que el fabricante proporciona sobre sus plataformas
 de trabajo es escasa y poco concreta, lo que puede impactar negativamente
 en el interés del alumno, provocando que los conocimientos y conceptos
 no queden del todo entendidos.
 
\end_layout

\begin_layout Section
Revisión de la literatura.
\end_layout

\begin_layout Standard
TBD.
\end_layout

\begin_layout Section
Propósito.
\end_layout

\begin_layout Subsection
\paragraph_spacing double
\noindent

\lang spanish
Objetivo general.
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Describir el proceso de implementación de un sistema de procesamiento de
 señales e imágenes mediante hardware reconfigurable basado en la tarjeta
 Atlys.
\end_layout

\begin_layout Subsection
\paragraph_spacing double
\noindent

\lang spanish
Objetivos específicos.
\end_layout

\begin_layout Itemize
\paragraph_spacing double

\lang english
Mostrar la conversión de los algoritmos matemáticos básicos que intervienen
 en el procesamiento de señales, a hardware en FPGA, haciendo uso de la
 abstracción que proporciona Simulink
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Facilitar el diseño e implementación de un sistema de procesamiento de audio
 en tiempo real, basado en el desarrollo de un algoritmo de eco, así como
 un sistema de detección de bordes en una imagen basado en el algoritmo
 Sobel, ambos utilizando bloques de Xilinx System Generator para Simulink.
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Mostrar la conversión de los algoritmos matemáticos básicos que intervienen
 en el procesamiento de señales, a hardware en FPGA, haciendo uso de la
 abstracción que proporciona Simulink®.
 
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Describir las técnicas de implementación más eficientes para el diseño de
 filtros FIR e IIR sobre la familia de FPGAs Spartan-6 contenida en la tarjeta
 Atlys.
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Diseñar las propiedades intelectuales (IPs) más comunes en el tratamiento
 de señales tales como bloques de filtros FIR, IIR y convoluciones, utilizando
 los entornos de programación de MATLAB® y Xilinx®.
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Explicar los diferentes métodos de ejecución del hardware diseñado en Simulink®,
 sobre la tarjeta Atlys.
 
\end_layout

\begin_layout Itemize
\paragraph_spacing double
\noindent

\lang spanish
Justificar el uso de MATLAB/Simulink® y Xilinx/ISE® para el diseño e implementac
ión de algoritmos complejos en contraste con el uso tradicional de HDL puro.
\end_layout

\end_body
\end_document
